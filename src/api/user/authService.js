const _ = require('lodash');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const User = require('./user');

const emailRegex = /\S+@\S+\.\S+/;
const passwordRegex = /((?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20})/;

const sendErrorsFromDB = (res, dbErrors) => {
    const errors = [];
    _.forIn(dbErrors.errors, er => errors.push()); // Scans errors
    return res.status(400).json({ errors });
}

const login = (req, res, next) => {
    const email = req.body.email || ''; // Getting email in body of request
    const password = req.body.password || ''; // Getting password in body of request

    User.findOne({ email }, (error, user) => {
        if (error) {
            return sendErrorsFromDB(res, error);
        } else if (user && bcrypt.compareSync(password, user.password)) {
            const token = jwt.sign({ ...user }, process.env.AUTH_SECRET, { expiresIn: "1 day" });
            const { name, email } = user;
            res.json({ name, email, token }); // Token generated by jwt
        } else { 
            return res.status(400).send({ errors: ['Invalid User/Password'] });
        }
    });

}

const validateToken = (req, res, next) => { // Checks if the token is expired
    const token = req.body.token || '';
    jwt.verify(token, process.env.AUTH_SECRET, (error, decoded) => {
        return res.status(200).send({ valid: !error });
    });
}

const signup = (req, res, next) => {
    const name = req.body.name || '';
    const email = req.body.email || '';
    const password = req.body.password || '';
    const confirmPassword = req.body.confirm_password || '';

    if (!email.match(emailRegex)) {
        return res.status(400).send({ erros: ['The informed Email is invalid'] })
    }
    
    if(!password.match(passwordRegex)) {
        return res.status(400).send({ 
            errors: [`Password must have: one lowercase letter, one uppercase letter, one number, one special
             character(@#$ %) and size between 6-20 characters.`] 
        });
    }

    const salt = bcrypt.genSaltSync();
    const passwordHash = bcrypt.hashSync(password, salt);

    if (!bcrypt.compareSync(confirmPassword, passwordHash)) {
        return res.status(400).send({ errors: ['Passwords does not match.'] });
    }

    User.findOne({ email }, (error, user) => {
        if(error) {
            return sendErrorsFromDB(res, error);
        } else if (user) {
            return res,status(400).send({ errors: ['User already registered'] });
        } else {
            const newUser = new User({ name, email, password: passwordHash });
            newUser.save(error => {
                if (error) {
                    return sendErrorsFromDB(res, error);
                } else {
                    login(req, res, next);
                }
            })
        }
    });
}

module.exports = { login, signup, validateToken };
